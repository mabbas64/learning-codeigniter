1- Download CodeIgniter (I got the 4.1.2 version on 5nov2013 first time use).
2- Extract the files to a folder in /htdocs. Create apache VirtualHost ( i did http://ci.dev/) in httpd-vhosts.conf
----- also update the windows hosts file to point to ci.dev in /htdocs/ci-project
3- Add an encryption key in the config.php inside /application folder of our CI project.
4- Create a mysql DB from phpMyAdmin etc, we'll used this in our database.php of CI project.

5- Modifying autload.php 
----Libraries: add 'database', and 'session' libraries to the $autoload['libraries'] array,
------- this'll allow us to use database and sessions on all of our controller
----Helpers: are basically like libraries but there's not as much to them.
------- we'll add the 'url' helper here.
----!---- Its best to add libraries/helpers etc within the controllers if you need those in fewer areas.

6- Adding DB tables for the test project
---- add a 'posts' table from phpMyAdmin  ,with fields > http://i.imgur.com/siarX5V.jpg
---! table names are plural in frameworks

7- Create a Model now.
---- save the file in /models folder of project as 'post.php'. Model names are singular in frameowkrs

8- Create a Controller
---- save a file in /controllers folder of project as 'posts.php'. Controller names are plural
----- Add an index function that fetches db data
------! Notice how the controller matches name of the db table  and 

9- Print the database fetched data temporary by visiting http://ci.dev/index.php/posts
---- in the url above, index.php is the main ci index.php and /posts is our controller 
------- you'll see a blank array (as we dont have the DB tables filled yet) http://i.imgur.com/1tQnWUk.jpg

10- Pouplate DB table 'posts' via PHPmyAdmin.
----- http://i.imgur.com/MQ9ScJu.jpg
------- Visit again http://ci.dev/index.php/posts
--------- In browser you should see:   http://i.imgur.com/Zjfdljy.jpg  (doesn't have the inactive 3rd post)

11- Creating a View
---- create 'post_index.php' in /Views folder. It doesnt need a class, it'll contain all our HTML
--!!-- inside the 'posts' controller, load the view and pass it the $data array there- which has DB data.

12- Setting up Routes
------ 1- change default_controller in routes.php from 'welcome' to 'posts', so we get rid of default 
----------- CI message page on http://ci.dev/ , and it shud show the main posts controller, hence, view for now
----- also,we don't want do http://ci.dev/index.php/posts to view the posts on localhost
------- AFTER this step, we can access the posts and other pages without the /index.php/ in url
--------- e.g. http://ci.dev/posts
----- + http://ellislab.com/codeigniter/user-guide/general/urls.html
-------- copy the code and paste it in ur CI project's .htaccess file. 
----------  RewriteEngine on
			RewriteCond $1 !^(index\.php|images|robots\.txt)
			RewriteRule ^(.*)$ /index.php/$1 [L]

13- Active Record (Database):
- We can also do selectors on multiple lines/steps, instead of the single line one like we did previously
-- Single line: $this->db->select()->from('posts')->where('active',1)->order_by('date_added','desc')->limit($num,$start);
-- Multiple lines:
---- 	$this->db->select('*');
		$this->db->from('posts');
		$this->db->where('active',1);
		$this->db->where(array('active'=>1)); # this is the same as line above it, it just allows more conditions in array
		$this->db->order_by('date_added','desc');
		$this->db->limit($num,$start);
		// For Joining, we can do
		$this->db->join('users','users.userID=posts.userID','left');
		//alternatively, we can run a query by this also
		$query=$this->db->get_where('posts'array('active'=>1),$num,$start);
		# EVERYTHIG ABOVE THIS POINT IS JUST PREPARING THE QUERY. THE QUERY WILL ONLY RUN AFTER THE FOLLOWING Line		
-
- To run queries directly in CI, instead of using ActiveRecord, use:
-- $query = $this->db->query("SELECT * FROM posts WHERE active=1 ORDER BY date_added desc LIMIT $num,$start");
--- this is faster than using ActiveRecord also. 

14- Creating the (blog)'Post' MVC -video6-
- Further refined the Add, Insert, Update and Delete functions in the 'post' model and 'posts' Controller.

15- create views for single-post, insert post, update post, etc
--- create in /views , post.php , it'll be the single-post page
--- create in /views , new_post.php .. we'll add new posts from here.  it'll look like this http://i.imgur.com/qFh9vLZ.jpg
----- this form is accessible from http://ci.dev/posts/new_post  (note the /posts/ in URL represent the controller!)
--- create in /views, edit_post.php , we'll edit posts from here. notice how we send the postID in the <form>'s action parameter.
----- also notice, how the input fields on the form here have the 'value' parameters being populated by fetching previous data from DB.
-------- u can access the edit_post page by: http://ci.dev/posts/edit_post/4 ...
------------ this is how it looks in browser. http://i.imgur.com/0aEPkeg.jpg
--- we dont need a view for deleting a post. the controller delets the post and redirects to homepage.

16- Pagination   -video 7-
-- We'll use the 'pagination' library of CI for pagination.
---- we use load the pagination library in posts Contoller's index function.
------ full detail of how each param of this libary works > http://ellislab.com/codeigniter/user-guide/libraries/pagination.html
-- We added a get_posts_count function to the post Model. this is required for the pagination variable inside Posts Controller's index func

17- Users MVC   -video 8-
-- Add a table 'users' to the project database. http://i.imgur.com/gLpkm4P.jpg
-- Create a 'user.php' Model for users. notice how the name is singular since its a Model.
----- Add a create_user and login func to the user Model.
-- Create 'users.php' Controller for Users.
----- Add a login func, logout func.
------- Used sessions in login/logout.
--!!----- Read more about Sessions Class on CI site user_guide. much more info on how to update sessions etc.
-**-- Break the single html pages to header/footer/page-name, for clean look and easy maintainability.

-- Add a Login View for Users. under 'login.php'
---- Login page must be at > http://ci.dev/users/login  or locahost/ci_project, depending on ur VirtualHost settings
------- try logging with a wrong user/pass , and then add a user/pass in db and login with correct credentials. http://i.imgur.com/fpTUZf8.jpg
--------- MAKE SURE: when adding a user manually, convert the password to SHA1 before saving it in DB. because login function in Controller
------------ converts the login form password to SHA before matching it with DB.

-- Add user-type combo-box into the login View.
----- Update the 'users' Controller and Model with the user_type variables too. so the user can only login if his user/pass/user_type all match

18- Putting Checks on which users can add new Posts.
---- Update the posts Controller's add / edit / delete funcs, 
------- check if the current session user has the right user_type  before allowing him to add/edit/del posts. otherwise redirect to home
---------- its better create a func within the controller that we pass a required-user-type param to, and that func, in turn,
------------- checks whether the current user is allowed to perform that task or not (see the edit_post func in 'posts' Controller)
---------------- much better than copy pasting the same user-permissions code in all functions like edit/add/delete blog-posts.