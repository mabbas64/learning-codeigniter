1- Download CodeIgniter (I got the 4.1.2 version on 5nov2013 first time use).
2- Extract the files to a folder in /htdocs. Create apache VirtualHost ( i did http://ci.dev/) in httpd-vhosts.conf
----- also update the windows hosts file to point to ci.dev in /htdocs/ci-project
3- Add an encryption key in the config.php inside /application folder of our CI project.
4- Create a mysql DB from phpMyAdmin etc, we'll used this in our database.php of CI project.

5- Modifying autload.php 
----Libraries: add 'database', and 'session' libraries to the $autoload['libraries'] array,
------- this'll allow us to use database and sessions on all of our controller
----Helpers: are basically like libraries but there's not as much to them.
------- we'll add the 'url' helper here.
----!---- Its best to add libraries/helpers etc within the controllers if you need those in fewer areas.

6- Adding DB tables for the test project
---- add a 'posts' table from phpMyAdmin  ,with fields > http://i.imgur.com/siarX5V.jpg
---! table names are plural in frameworks

7- Create a Model now.
---- save the file in /models folder of project as 'post.php'. Model names are singular in frameowkrs

8- Create a Controller
---- save a file in /controllers folder of project as 'posts.php'. Controller names are plural
----- Add an index function that fetches db data
------! Notice how the controller matches name of the db table  and 

9- Print the database fetched data temporary by visiting http://ci.dev/index.php/posts
---- in the url above, index.php is the main ci index.php and /posts is our controller 
------- you'll see a blank array (as we dont have the DB tables filled yet) http://i.imgur.com/1tQnWUk.jpg

10- Pouplate DB table 'posts' via PHPmyAdmin.
----- http://i.imgur.com/MQ9ScJu.jpg
------- Visit again http://ci.dev/index.php/posts
--------- In browser you should see:   http://i.imgur.com/Zjfdljy.jpg  (doesn't have the inactive 3rd post)

11- Creating a View
---- create 'post_index.php' in /Views folder. It doesnt need a class, it'll contain all our HTML
--!!-- inside the 'posts' controller, load the view and pass it the $data array there- which has DB data.

12- Setting up Routes
------ 1- change default_controller in routes.php from 'welcome' to 'posts', so we get rid of default 
----------- CI message page on http://ci.dev/ , and it shud show the main posts controller, hence, view for now
----- also,we don't want do http://ci.dev/index.php/posts to view the posts on localhost
------- AFTER this step, we can access the posts and other pages without the /index.php/ in url
--------- e.g. http://ci.dev/posts
----- + http://ellislab.com/codeigniter/user-guide/general/urls.html
-------- copy the code and paste it in ur CI project's .htaccess file. 
----------  RewriteEngine on
			RewriteCond $1 !^(index\.php|images|robots\.txt)
			RewriteRule ^(.*)$ /index.php/$1 [L]

13- Active Record (Database):
- We can also do selectors on multiple lines/steps, instead of the single line one like we did previously
-- Single line: $this->db->select()->from('posts')->where('active',1)->order_by('date_added','desc')->limit($num,$start);
-- Multiple lines:
---- 	$this->db->select('*');
		$this->db->from('posts');
		$this->db->where('active',1);
		$this->db->where(array('active'=>1)); # this is the same as line above it, it just allows more conditions in array
		$this->db->order_by('date_added','desc');
		$this->db->limit($num,$start);
		// For Joining, we can do
		$this->db->join('users','users.userID=posts.userID','left');
		//alternatively, we can run a query by this also
		$query=$this->db->get_where('posts'array('active'=>1),$num,$start);
		# EVERYTHIG ABOVE THIS POINT IS JUST PREPARING THE QUERY. THE QUERY WILL ONLY RUN AFTER THE FOLLOWING Line		
-
- To run queries directly in CI, instead of using ActiveRecord, use:
-- $query = $this->db->query("SELECT * FROM posts WHERE active=1 ORDER BY date_added desc LIMIT $num,$start");
--- this is faster than using ActiveRecord also. 

14- Creating the (blog)'Post' MVC -video6-
- Further refined the Add, Insert, Update and Delete functions in the 'post' model and 'posts' Controller.

15- create views for single-post, insert post, update post, etc
--- create in /views , post.php , it'll be the single-post page
--- create in /views , new_post.php .. we'll add new posts from here.  it'll look like this http://i.imgur.com/qFh9vLZ.jpg
----- this form is accessible from http://ci.dev/posts/new_post  (note the /posts/ in URL represent the controller!)
--- create in /views, edit_post.php , we'll edit posts from here. notice how we send the postID in the <form>'s action parameter.
----- also notice, how the input fields on the form here have the 'value' parameters being populated by fetching previous data from DB.
-------- u can access the edit_post page by: http://ci.dev/posts/edit_post/4 ...
------------ this is how it looks in browser. http://i.imgur.com/0aEPkeg.jpg
--- we dont need a view for deleting a post. the controller delets the post and redirects to homepage.

16- Pagination   -video 7-
-- We'll use the 'pagination' library of CI for pagination.
---- we use load the pagination library in posts Contoller's index function.
------ full detail of how each param of this libary works > http://ellislab.com/codeigniter/user-guide/libraries/pagination.html
-- We added a get_posts_count function to the post Model. this is required for the pagination variable inside Posts Controller's index func

17- Users MVC   -video 8-
-- Add a table 'users' to the project database. http://i.imgur.com/gLpkm4P.jpg
-- Create a 'user.php' Model for users. notice how the name is singular since its a Model.
----- Add a create_user and login func to the user Model.
-- Create 'users.php' Controller for Users.
----- Add a login func, logout func.
------- Used sessions in login/logout.
--!!----- Read more about Sessions Class on CI site user_guide. much more info on how to update sessions etc.
-**-- Break the single html pages to header/footer/page-name, for clean look and easy maintainability.

-- Add a Login View for Users. under 'login.php'
---- Login page must be at > http://ci.dev/users/login  or locahost/ci_project, depending on ur VirtualHost settings
------- try logging with a wrong user/pass , and then add a user/pass in db and login with correct credentials. http://i.imgur.com/fpTUZf8.jpg
--------- MAKE SURE: when adding a user manually, convert the password to SHA1 before saving it in DB. because login function in Controller
------------ converts the login form password to SHA before matching it with DB.

-- Add user-type combo-box into the login View.
----- Update the 'users' Controller and Model with the user_type variables too. so the user can only login if his user/pass/user_type all match

18- Putting Checks on which users can add new Posts.
---- Update the posts Controller's add / edit / delete funcs, 
------- check if the current session user has the right user_type  before allowing him to add/edit/del posts. otherwise redirect to home
---------- its better create a func within the controller that we pass a required-user-type param to, and that func, in turn,
------------- checks whether the current user is allowed to perform that task or not (see the edit_post func in 'posts' Controller)
---------------- much better than copy pasting the same user-permissions code in all functions like edit/add/delete blog-posts.

19- Setting up Forms    -video10-
--- in the Users Controller, create the 'register' function that'll receive the data from registration form via _POST
------ within the 'register' function, load the 'user' model, so we can talk to the DB
--------- then,  login the user after registering him. if no _POST data received, just show the registration form view.
------------- we MUST load the 'form' Helper here ^
-----!!---------- Read more about Form Helper on CI's user guide > http://ellislab.com/codeigniter/user-guide/helpers/form_helper.html

--- Create view 'user_register' , this'll contain our form. We'll use CI's form Helper here.
------- we replace the <form> and </form> tags with the form helper's form_open() and form_close() functions.
------- we replace the <input type="submit"> button with from_submit('','Register');
------- we replace <input type="text" name="username" /> with form_input($data_form); and $data_form is an array that contains id, name, style
---------- etc of the input field we want to create. for example. http://i.imgur.com/PqW9eMQ.jpg
------- we replace the <select> combo box with form_dropdown(), to which we passed an array of options.
--++- UPDATE the user's DB table and set userID to auto-increment. otherwise the registration form has issues registering new users
-------- http://i.imgur.com/55cIu0N.jpg

20- Form Validation   -video 11-
-- Add an email input field and a 2nd password box in the register_user view.
-- Add the validation we're going to perform on our registeration form, into users controller's register func (users/register)
---- we use arrays within arrays for specifying the validation rules on each field in the form
-------- e.g. this is how i did it  > http://i.imgur.com/gFHcyue.jpg
---- load the form_validation library withing the users controller's register() func
---------- more about CI form validation library here. http://ellislab.com/codeigniter/user-guide/libraries/form_validation.html
--**-- Newbie mistakes: Make sure you're passing the $data array to the view when loading the view. You'll get an error if you try to
--------- use any $data etc variable in the view and didn't actually pass the variable to the view in the first place!
--PRO TIP:-- when a form is submitted and validation errors are shown, the user will have to re-enter the form fields again. To avoid this,
----------------  its better to specify the input field on the view, such that, it's values => set_value('field_name')
-------------------- this way, previous values are reloaded into the fields. e.g. http://i.imgur.com/OjSGBls.jpg
---------------------!--  in order to make the dropdown box remember previuos value/option, we need to add an id to it in the view, view $js param
------------------------------ AND change the 'default value' parameter for form_dropdown to set_value('#id of the same dropdown here');

21- Uploading Files - video 12-
-- Create an Upload Controller in /controllers as upload.php.
----- In the 'upload' Controller's construct, load the 'form' Helper.  we'll also need 'url' helper, but we're already autloading it
----- in the 'index' function of upload controller, load the view 'upload_form', and load an array 'error' to it on the fly.
----- create a 'do_upload()' func in the controller, this is where we'll do the uploading.
-------- This func loads AFTER a user tries to upload a file.
-------- we'll use the 'upload' library of CI in this do_upload func. but first we need to specify the configs for it
---------------- read more about the upload librayr here > http://ellislab.com/codeigniter/user-guide/libraries/file_uploading.html
----------- create a folder 'upload' in the root of ci's directory (not in the applicaiton sub directory)
-- Create a View called 'upload_form.php'
----- echo any errors that occured during upload
----- Create a Multipart form in the view. the form _POSTs the data to the upload controller's do_upload() func
-- Create the upload_success.php view, this shows if a file uploaded succesffuly and any file information 
-- Load the upload page via http://di.dev/upload -- just the controller. as the view loads in its index func
----- uploading a non allowed file type error: http://i.imgur.com/oYtxCgv.jpg
----- upload successful > http://i.imgur.com/wOlQoQG.jpg

22- Resizing Images  -video13-
-- We'll use the image_lib library to resize images within the 'uploads' controller. Add resize() func to that controller
---- we then use the newly created resize() func of this uploads library by passing it the uploaded file's path, and the file name itself
------- e.g. the file just uploaded, we see its information printed out. we use the info from the same array to pass to resize()
----------- http://i.imgur.com/7tdZfqQ.jpg
---- you can see the new thumbnail in /uploads folder with the -thumb in the file name.

23- Mailing-List creation -video 14-
-- Create an 'emails' controller that'll send out the emails to all users. We'll use the 'email' library of CI for this
----- we should add some config and then initialize the email library, so we can send out  html emails , which utilise <strong> etc like tags
-- Create a new function get_emails within the user model that'll fetch all users' email address and pass it to where we need em
----- in this case, the emails controller will rquest them for sending out the news eltter to the mailing list.
-- Now to send the email/newsletter, go to http://ci.dev/emails/email (or localhost/emails/email)
------ it wont work from localhsot, but while sending the emails, u can see with email->print_debugger   how the mail have been sent/look like
----------- > http://i.imgur.com/PX1SC7T.jpg
---!!- CHECK the CI email library USER guide for more info. http://ellislab.com/codeigniter/user-guide/libraries/email.html

24- Comments MVC  - vid 14 - 
-- Add the comments Controller. and within it, the add_comment func
-- Add a 'comments' table in DB with this structure > http://i.imgur.com/lehVIyI.jpg
-- Create the comment model, then add the add_comment and get_comments func
----- in the get_comments, we do a left join to get the user name from the users table along with comments from comments table
-- Now, update the 'post' view and posts Controller . so the post view displays the comments
----- Add a comment-form to the end of 'post' view, right after where comments are displayed.
----- on the posts Controller, on the post() func, we want to load the comment model and fetch the comments.
-------- make sure to load the 'form' helper within that post() func in the controller, before loadin the view. this is for comments form.
-- now load the single post page and u shud see the comment form. http://ci.dev/posts/post/9
----- if u try to add comment without having logged in, it shud show the login form. otherwise it shud add the comment and display it on same page


25- Captcha in comments form:
---- create a folder 'captcha' in ci directory (i.e. outside of the applications/ dir)
---- Update the posts controller's post() func. we'll use the 'captcha' helper of CI for this purpose.
---- Update the post view, just output the $captcha varialbe we sent from posts controller's post() func previously
--!!--- If in the browser, the captcha image doens't display, but u can see the images being generated in /captcha folder
---------- make sure to add '|captcha|' to .htaccess in the codeIgniter's root http://i.imgur.com/y754lwy.jpg
---- Update the comments Controllers's add_comment() so it compares captcha image to the captcha text field input.
-------- now only captcha correct comments will be stored. like http://i.imgur.com/loWG8eX.jpg

26- Smileys - vid 16 -
-- download the smileys zip package from CodeIgniter's smileys page (on its user-guide page)
-- extract and put the /smileys folder in the main /ci project directory (one level above the /application directory)
-- in the posts Controller's post() func, load the 'smiley' helper and the 'table' library.
----- the table library will help us sort all these icons
-------- we generate a table that has all the smileys added into each cell, very neat! ;p
-- Update the post.php View , we give the comment text_area an ID, the same id we used previously with the table library to
------ attach the smileys to this text area element (in posts Controller's post() func).
---- Then we echo smiley_js() in the post.php View, it'll add javascript that when we click a smiley, it'll add it to comments text area.
------ Then we echo out the smiley_table variable, that we passed to this post.php view from posts.php controller previoulsy.
--!!--- If in the browser, the smiley images doens't display,  
---------- make sure to add '|captcha|' to .htaccess in the codeIgniter's root http://i.imgur.com/y754lwy.jpg
---- smileys can now be added to comment fields on any http://ci.dev/posts/post/9 like pages. http://i.imgur.com/WRWQpBc.jpg
-- BUT smileys wont appear in saved comments. they'll only appear as :hug: :kiss: etc.
---- We need to parse_smileys() these  :hug: like codes before printing out the comments . withing post.php View.
------- and now comments will appear in printed out comments http://i.imgur.com/vdwgauq.jpg